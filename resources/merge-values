#!/usr/local/bin/python

import json
import os
import sys

from jsonmerge import merge

class text:
    BLUE        = '\033[1;34m'
    BOLD        = '\033[1m'
    RESET       = '\033[0m'
    RED         = '\033[0;31m'
    YELLOW      = '\033[1;33m'

def print_error(string):
    print(f"{text.RED}Error:{text.RESET} {string}")

def print_info(string):
    print(f"{text.BLUE}Info:{text.RESET} {string}")

def print_warning(string):
    print(f"{text.YELLOW}Warning:{text.RESET} {string}")

def usage():
    print_info(f"Usage: {sys.argv[0]} <merge-list-file> <merged-file>")

def main():
    merge_list = get_merge_list()
    verify_files_exist(merge_list)
    merged = merge_files(merge_list)

    with open(sys.argv[2], 'w') as merged_file:
        json.dump(merged, merged_file, indent=4, sort_keys=True)
    print_info(f"Merge complete {text.BOLD}[{sys.argv[2]}]{text.RESET}")

def get_merge_list():
    if (len(sys.argv) != 3):
        usage()
        sys.exit(1);

    with open(sys.argv[1]) as merge_list_file:
        merge_list = [line.rstrip('\n') for line in merge_list_file]
    return merge_list

def merge_files(file_paths):
    merged = {}
    for file_path in file_paths:
        if merged:
            print_info(f"Merging {text.BOLD}[{file_path}]{text.RESET}")
        else:
            print_info(f"Initialising with {text.BOLD}[{file_path}]{text.RESET}")
        with open(file_path) as file:
            content = json.load(file)
            merged = merge(merged, content)
    return merged

def verify_files_exist(file_paths):
    for file_path in file_paths:
        if not os.path.isfile(file_path):
            sys.exit(f"File does not exist: {text.BOLD}[{file_path}]{text.RESET}")

if __name__ == '__main__':
    main()
